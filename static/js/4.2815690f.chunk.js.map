{"version":3,"sources":["modules/search/components/Location.tsx","modules/search/components/SearchResults.tsx","modules/search/components/Search.tsx"],"names":["Location","props","dispatch","useDispatch","className","onClick","locationSelectedAction","location","name","sys","country","main","temp","SearchResults","loading","useSelector","state","search","error","results","searchResults","Fragment","map","item","id","SearchScreen","useState","query","setQuery","type","placeholder","value","onChange","e","target","autoFocus","fetchLocationsAction","started"],"mappings":"oOAiCeA,EAvBE,SAACC,GAMjB,IAAMC,EAAWC,cAUjB,OACC,oBAAGC,UAAU,0BAA0BC,QALjB,WACtBH,EAASI,YAAuBL,EAAMM,YAItC,UACEN,EAAMM,SAASC,KADjB,KACyBP,EAAMM,SAASE,IAAIC,QAD5C,MACuD,uBAAMN,UAAU,uBAAhB,UAAwCH,EAAMM,SAASI,KAAKC,KAA5D,eCQ1CC,EA7BO,WAMrB,IAAMC,EAAUC,aAAqC,SAAAC,GAAK,OAAIA,EAAMC,OAAOH,WACrEI,EAAQH,aAA+C,SAAAC,GAAK,OAAIA,EAAMC,OAAOC,SAC7EC,EAAUJ,aAA4C,SAAAC,GAAK,OAAIA,EAAMC,OAAOG,iBAMlF,OAAIN,EACI,2CAGJI,EACI,+EAIP,cAAC,IAAMG,SAAP,UACEF,EAAQG,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,CAAwBhB,SAAUgB,GAAnBA,EAAKC,UCiB7BC,UAxCM,WAMpB,IAAMvB,EAAWC,cAMjB,EAA0BuB,mBAAiB,IAA3C,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OACC,sBAAKxB,UAAU,SAAf,UACC,mDACA,8BACC,uBAAOyB,KAAK,OAAOC,YAAY,cAAcC,MAAOJ,EAAOK,SAdlC,SAACC,GAC5BL,EAASK,EAAEC,OAAOH,QAa0EI,WAAW,MAEtG,wBAAQ/B,UAAU,uBAAuBC,QAZnB,WACnBsB,GACHzB,EAASkC,IAAqBC,QAAQV,KAUtC,6BACA,cAAC,EAAD","file":"static/js/4.2815690f.chunk.js","sourcesContent":["import React from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { locationSelectedAction } from '../actions'\nimport { Location as LocationType } from '../../api/types'\n\ninterface Props {\n\tlocation: LocationType\n}\n\nconst Location = (props: Props): JSX.Element => {\n\n\t/**\n\t * Dependency Hooks\n\t */\n\n\tconst dispatch = useDispatch()\n\n\t/**\n\t * Local Functions\n\t */\n\n\tconst _onItemClicked = () => {\n\t\tdispatch(locationSelectedAction(props.location))\n\t}\n\n\treturn (\n\t\t<p className='search__text--clickable' onClick={_onItemClicked}>\n\t\t\t{props.location.name}, {props.location.sys.country} - <span className='search__text--italic'>{props.location.main.temp}Â°C</span>\n\t\t</p>\n\t)\n}\n\nexport default Location\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Location as LocationType } from '../../api/types'\nimport { RootStoreState } from '../../root'\nimport Location from './Location'\n\nconst SearchResults = (): JSX.Element => {\n\n\t/**\n\t * Store State\n\t */\n\n\tconst loading = useSelector<RootStoreState, boolean>(state => state.search.loading)\n\tconst error = useSelector<RootStoreState, Error | undefined>(state => state.search.error)\n\tconst results = useSelector<RootStoreState, LocationType[]>(state => state.search.searchResults)\n\n\t/**\n\t * Local Functions\n\t */\n\n\tif (loading) {\n\t\treturn <p>Loading...</p>\n\t}\n\n\tif (error) {\n\t\treturn <p>An error occurred while loading the locations.</p>\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{results.map(item => <Location key={item.id} location={item} />)}\n\t\t</React.Fragment>\n\t)\n}\n\nexport default SearchResults\n","import '../styles/Search.scss'\n\nimport React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { fetchLocationsAction } from '../actions'\nimport SearchResults from './SearchResults'\n\nconst SearchScreen = (): JSX.Element => {\n\n\t/**\n\t * Dependency Hooks\n\t */\n\n\tconst dispatch = useDispatch()\n\n\t/**\n\t * Local State\n\t */\n\n\tconst [query, setQuery] = useState<string>('')\n\n\t/**\n\t * Local Functions\n\t */\n\n\tconst _handleQueryChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetQuery(e.target.value)\n\t}\n\n\tconst _fetchLocations = () => {\n\t\tif (query) {\n\t\t\tdispatch(fetchLocationsAction.started(query))\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className='search'>\n\t\t\t<h2>React Weather app</h2>\n\t\t\t<div>\n\t\t\t\t<input type=\"text\" placeholder=\"Search text\" value={query} onChange={_handleQueryChanged} autoFocus={true} />\n\t\t\t</div>\n\t\t\t<button className='search__text--button' onClick={_fetchLocations}>Fetch Locations</button>\n\t\t\t<SearchResults />\n\t\t</div>\n\t)\n}\n\nexport default SearchScreen"],"sourceRoot":""}