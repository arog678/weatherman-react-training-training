{"version":3,"sources":["modules/details/components/ForecastRow.tsx","modules/details/components/ForecastComponent.tsx","modules/details/components/CurrentTemperatureItem.tsx","modules/details/components/CurrentTemperature.tsx","modules/details/components/Details.tsx"],"names":["ForecastRow","day","temp","weatherDescription","className","ForecastComponent","forecast","useSelector","state","details","loading","error","undefined","list","map","fc","dt_txt","main","weather","description","dt","CurrentTemperatureItem","heading","label","CurrentTemperature","location","temp_min","temp_max","pressure","DetailsScreen","dispatch","useDispatch","selectedLocation","useEffect","fetchForecastAction","started","id","name","sys","country"],"mappings":"8SAyBeA,EAhBK,SAAC,GAIiB,IAHrCC,EAGoC,EAHpCA,IACAC,EAEoC,EAFpCA,KACAC,EACoC,EADpCA,mBAGA,OACC,sBAAKC,UAAU,eAAf,UACC,uBAAOA,UAAU,cAAjB,SAAgCH,IAChC,uBAAOG,UAAU,eAAjB,SAAiCF,IACjC,gCAAQC,QCiBIE,G,MA5BW,WAEzB,IAAMC,EAAWC,aAA+D,SAAAC,GAAK,OAAIA,EAAMC,QAAQH,YACjGI,EAAUH,aAAqC,SAAAC,GAAK,OAAIA,EAAMC,QAAQC,WACtEC,EAAQJ,aAA+C,SAAAC,GAAK,OAAIA,EAAMC,QAAQE,SAEpF,OAAID,EACI,2CAGJC,QAAsBC,IAAbN,EACL,8EAGD,gCACN,oBAAIF,UAAU,iBAAd,uBACCE,EAASO,KAAKC,KAAI,SAAAC,GAAE,OACpB,cAAC,EAAD,CAECd,IAAMc,EAAGC,OACTd,KAAOa,EAAGE,KAAKf,KAAO,SACtBC,mBAAqBY,EAAGG,QAAQ,GAAGC,aAH7BJ,EAAGK,YCPEC,G,MAXgB,SAAC,GAGiB,IAFhDC,EAE+C,EAF/CA,QACAC,EAC+C,EAD/CA,MAGA,OAAO,uBAAMnB,UAAU,iBAAhB,UACN,oBAAIA,UAAU,qBAAd,SAAoCkB,IACpC,uBAAOlB,UAAU,mBAAjB,SAAqCmB,SCuBxBC,G,MA7BY,SAAC,GAEgB,IAD3CC,EAC0C,EAD1CA,SAGA,OACC,gCACC,oBAAIrB,UAAU,qBAAd,SAAoCqB,EAASR,KAAKf,OAClD,sBAAKE,UAAU,wBAAf,UACC,cAAC,EAAD,CACCkB,QAAS,WACTC,MAAOE,EAASR,KAAKS,SAAW,WAEjC,cAAC,EAAD,CACCJ,QAAS,WACTC,MAAOE,EAASR,KAAKU,SAAW,WAEjC,cAAC,EAAD,CACCL,QAAS,WACTC,MAAOE,EAASR,KAAKU,SAAW,OAEjC,cAAC,EAAD,CACCL,QAAS,WACTC,MAAOE,EAASR,KAAKW,SAAW,iBCyBtBC,UA7CO,WAMrB,IAAMC,EAAWC,cAMXN,EAAWlB,aAAkD,SAAAC,GAAK,OAAIA,EAAMC,QAAQuB,oBAiB1F,OAXAC,qBAAU,WACLR,GACHK,EAASI,IAAoBC,QAAQV,EAASW,OAE7C,CAACX,EAAUK,IAOTL,EAKJ,sBAAKrB,UAAU,UAAf,UACC,oBAAIA,UAAU,iBAAd,8BACA,qBAAIA,UAAU,kBAAd,UAAiCqB,EAASY,KAA1C,KAAkDZ,EAASa,IAAIC,WAE/D,cAAC,EAAD,CAAoBd,SAAUA,IAC9B,cAAC,EAAD,OATM","file":"static/js/3.a4e93297.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../styles/ForecastRow.scss'\r\n\r\ninterface ForecastRowProps {\r\n\tday: string;\r\n\ttemp: string;\r\n\tweatherDescription: string;\r\n}\r\n\r\nconst ForecastRow = ({\r\n\tday, \r\n\ttemp, \r\n\tweatherDescription\r\n}: ForecastRowProps): JSX.Element => {\r\n\r\n\treturn (\r\n\t\t<div className='rowContainer'>\r\n\t\t\t<label className='rowLabelDay'>{day}</label>\r\n\t\t\t<label className='rowLabelTemp'>{temp}</label>\r\n\t\t\t<label>{weatherDescription}</label>\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\nexport default ForecastRow","import React from 'react'\r\n\r\nimport { useSelector } from 'react-redux'\r\nimport { FetchForecastResponse } from '../../api/types'\r\nimport { RootStoreState } from '../../root'\r\nimport ForecastRow from './ForecastRow'\r\nimport '../styles/ForecastComponent.scss'\r\n\r\nconst ForecastComponent = (): JSX.Element => {\r\n\r\n\tconst forecast = useSelector<RootStoreState, FetchForecastResponse | undefined>(state => state.details.forecast)\r\n\tconst loading = useSelector<RootStoreState, boolean>(state => state.details.loading)\r\n\tconst error = useSelector<RootStoreState, Error | undefined>(state => state.details.error)\r\n\r\n\tif (loading) {\r\n\t\treturn <p>Loading...</p>\r\n\t}\r\n\r\n\tif (error || forecast === undefined) {\r\n\t\treturn <p>An error occurred while loading the forecast.</p>\r\n\t} \r\n\r\n\treturn <div>\r\n\t\t<h4 className='forecastHeader'>Forecast:</h4>\r\n\t\t{forecast.list.map(fc => \r\n\t\t\t<ForecastRow \r\n\t\t\t\tkey={ fc.dt } \r\n\t\t\t\tday={ fc.dt_txt} \r\n\t\t\t\ttemp={ fc.main.temp + ' °C' } \r\n\t\t\t\tweatherDescription={ fc.weather[0].description } \r\n\t\t\t/>\r\n\t\t)}\r\n\t</div>\r\n\r\n}\r\n\r\nexport default ForecastComponent","import React from 'react'\r\nimport '../styles/CurrentTemperatureItem.scss'\r\n\r\ninterface CurrentTemperatureItemProps {\r\n\theading: string\r\n\tlabel: string\r\n}\r\n\r\nconst CurrentTemperatureItem = ({\r\n\theading,\r\n\tlabel\r\n}: CurrentTemperatureItemProps): JSX.Element => {\r\n\r\n\treturn <span className='currentTempBox'>\r\n\t\t<h4 className='currentTempHeading'>{heading}</h4>\r\n\t\t<label className='currentTempLabel'>{label}</label>\r\n\t</span>\r\n}\r\n\r\nexport default CurrentTemperatureItem","import React from 'react'\r\nimport { Location } from '../../api/types'\r\nimport CurrentTemperatureItem from './CurrentTemperatureItem'\r\nimport '../styles/CurrentTemperature.scss'\r\n\r\ninterface CurrentTemperatureProp {\r\n\tlocation: Location\r\n}\r\n\r\nconst CurrentTemperature = ({\r\n\tlocation\r\n}: CurrentTemperatureProp): JSX.Element => {\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h4 className=\"temperatureDisplay\">{location.main.temp}</h4>\r\n\t\t\t<div className='currentWeatherDetails'>\r\n\t\t\t\t<CurrentTemperatureItem \r\n\t\t\t\t\theading={'Temp min'}\r\n\t\t\t\t\tlabel={location.main.temp_min + ' °C'}\r\n\t\t\t\t/>\r\n\t\t\t\t<CurrentTemperatureItem \r\n\t\t\t\t\theading={'Temp max'}\r\n\t\t\t\t\tlabel={location.main.temp_max + ' °C'}\r\n\t\t\t\t/>\r\n\t\t\t\t<CurrentTemperatureItem \r\n\t\t\t\t\theading={'Humidity'}\r\n\t\t\t\t\tlabel={location.main.temp_max + ' %'}\r\n\t\t\t\t/>\r\n\t\t\t\t<CurrentTemperatureItem \r\n\t\t\t\t\theading={'Humidity'}\r\n\t\t\t\t\tlabel={location.main.pressure + ' hPa'}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CurrentTemperature","import '../styles/Details.scss'\n\nimport React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { RootStoreState } from '../../root'\nimport { Location } from '../../api/types'\nimport { fetchForecastAction } from '../actions'\nimport ForecastComponent from './ForecastComponent'\nimport CurrentTemperature from './CurrentTemperature'\n\nconst DetailsScreen = (): JSX.Element | null => {\n\n\t/**\n\t * Dependency Hooks\n\t */\n\n\tconst dispatch = useDispatch()\n\n\t/**\n\t * Store State\n\t */\n\n\tconst location = useSelector<RootStoreState, Location | undefined>(state => state.details.selectedLocation)\n\n\t/**\n\t * Effects/Subscriptions\n\t */\n\n\tuseEffect(() => {\n\t\tif (location) {\n\t\t\tdispatch(fetchForecastAction.started(location.id))\n\t\t}\n\t}, [location, dispatch])\n\n\t/**\n\t * Local Functions\n\t */\n\n\t//AT THIS TIME KEEPING STATE ON REFRESH IS BEYOND SCOPE\n\tif (!location) {\n\t\treturn null\n\t}\n\n\treturn (\n\t\t<div className='details'>\n\t\t\t<h2 className=\"weatherHeading\">Weather Details:</h2>\n\t\t\t<h3 className=\"weathSubHeading\">{location.name}, {location.sys.country}</h3>\t\t\t\n\n\t\t\t<CurrentTemperature location={location}/>\n\t\t\t<ForecastComponent />\n\n\t\t</div>\n\t)\n}\n\nexport default DetailsScreen"],"sourceRoot":""}