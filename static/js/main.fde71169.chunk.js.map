{"version":3,"sources":["modules/search/actions.ts","modules/details/actions.ts","modules/search/reducer.ts","modules/details/reducer.ts","modules/api/functions.ts","modules/details/utils/formatForecastData.ts","modules/navigation/types.ts","modules/navigation/NavigationManager.ts","modules/api/sagas.ts","modules/search/sagas.ts","modules/root/sagas.ts","utils/logger.ts","modules/root/index.ts","modules/navigation/components/Loader.tsx","modules/navigation/components/LoaderErrorBoundary.tsx","modules/navigation/components/LazySwitch.tsx","modules/navigation/routes.ts","modules/navigation/components/NavigateSetter.tsx","App.tsx","index.tsx"],"names":["actionCreator","actionCreatorFactory","fetchLocationsAction","async","locationSelectedAction","fetchForecastAction","reducer","reducerWithInitialState","searchResults","loading","case","actions","started","state","error","undefined","failed","payload","done","result","searchActions","selectedLocation","forecast","fetchLocations","query","fetch","then","response","ok","json","Error","statusText","list","fetchForecast","locationId","Paths","navigate","formatForecastData","forecastResponseRaw","map","f","forecastInput","dt_txt","Date","dt","toLocaleDateString","weekday","main","temp","day","humidity","pressure","temp_max","max","temp_min","min","weather","forecastFormatter","count","cnt","handleFetchLocations","handleFetchForecast","action","call","put","params","formattedForecastData","takeEvery","handleLocationSelected","DETAILS","rootSaga","all","apiSaga","searchSaga","loggerMiddleware","createLogger","predicate","combineReducers","search","details","sagaMiddleware","createSagaMiddleware","middlewares","enhancers","compose","applyMiddleware","store","createStore","run","Loader","INITIAL_STATE","hasError","LoaderErrorBoundary","_onReloadPage","window","location","reload","errorInfo","console","this","onClick","props","children","React","PureComponent","LazySwitch","fallback","Search","lazy","Details","NavigateSetter","useNavigate","App","basename","path","HOME","element","container","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.fde71169.chunk.js","sourcesContent":["import actionCreatorFactory, { Action } from 'typescript-fsa'\nimport { Location } from '../api/types'\n\nconst actionCreator = actionCreatorFactory('Search')\n\n// Fetches locations based on a query\nexport type FetchLocationsPayload = Action<string>\nexport const fetchLocationsAction = actionCreator.async<string, Location[], Error>('FETCH_LOCATIONS')\n\n// Selects a location\nexport const locationSelectedAction = actionCreator<Location>('LOCATION_SELECTED')","import actionCreatorFactory, { Action } from 'typescript-fsa'\nimport { FetchForecastResponse } from '../api/types'\n\nconst actionCreator = actionCreatorFactory('Details')\n\n// location id is the payload\nexport type FetchForecastPayload = Action<number>\n\nexport const fetchForecastAction = actionCreator.async<number, FetchForecastResponse, Error>('FETCH_FORECAST')","import { reducerWithInitialState } from 'typescript-fsa-reducers'\nimport * as actions from './actions'\nimport { Location } from '../api/types'\n\nexport interface StoreState {\n\treadonly searchResults: Location[]\n\treadonly loading: boolean\n\treadonly error?: Error\n}\n\n/**\n * The initial store state for this module.\n */\nconst INITIAL_STATE: StoreState = {\n\tsearchResults: [],\n\tloading: false,\n}\n\n/**\n * Reducer function for this module.\n */\nexport const reducer = reducerWithInitialState(INITIAL_STATE)\n\t.case(actions.fetchLocationsAction.started, (state): StoreState => ({\n\t\t// set loading to true and clear existing results and error\n\t\t...state, loading: true, searchResults: [], error: undefined,\n\t}))\n\t.case(actions.fetchLocationsAction.failed, (state, payload): StoreState => ({\n\t\t// set loading to false and store error\n\t\t...state, loading: false, error: payload.error,\n\t}))\n\t.case(actions.fetchLocationsAction.done, (state, payload): StoreState => ({\n\t\t// set loading to false and store results\n\t\t...state, loading: false, searchResults: payload.result,\n\t}))\n","import { reducerWithInitialState } from 'typescript-fsa-reducers'\nimport { Location, FetchForecastResponse } from '../api/types'\nimport * as searchActions from '../search/actions'\n\nimport * as actions from './actions'\n\nexport interface StoreState {\n\treadonly selectedLocation?: Location\n\n\treadonly forecast?: FetchForecastResponse\n\treadonly loading: boolean\n\treadonly error?: Error\n}\n\n/**\n * The initial store state for this module.\n */\nconst INITIAL_STATE: StoreState = {\n\tloading: false,\n}\n\n/**\n * Reducer function for this module.\n */\nexport const reducer = reducerWithInitialState(INITIAL_STATE)\n\t// set selected location\n\t.case(searchActions.locationSelectedAction, (state, payload): StoreState => ({\n\t\t...state, selectedLocation: payload,\n\t}))\n\t.case(actions.fetchForecastAction.started, (state): StoreState => ({\n\t\t...state, loading: true\n\t}))\n\t.case(actions.fetchForecastAction.failed, (state, payload): StoreState => ({\n\t\t...state, loading: false, error: payload.error\n\t}))\n\t.case(actions.fetchForecastAction.done, (state, payload): StoreState => ({\n\t\t...state, loading: false, forecast: payload.result\n\t}))","import { FetchLocationsResponse, Location, FetchForecastResponse } from './types'\n\nconst APP_ID = 'd14a2d48e99a8e66fa820f8612456f5d'\n\nexport function fetchLocations(query: string): Promise<Location[]> {\n\tconst url = 'http://api.openweathermap.org/data/2.5/find?&units=metric&type=like&mode=json&APPID=' + APP_ID + '&q='\n\treturn fetch(url + query)\n\t\t.then(response => {\n\t\t\tif (response.ok) {\n\t\t\t\treturn response.json()\n\t\t\t}\n\t\t\tthrow new Error('Failed to fetch locations ' + response.statusText)\n\t\t})\n\t\t.then(json => json as FetchLocationsResponse)\n\t\t.then(response => {\n\t\t\treturn response.list\n\t\t})\n}\n\nexport function fetchForecast(locationId: number): Promise<FetchForecastResponse> {\n\tconst url = 'http://api.openweathermap.org/data/2.5/forecast/daily?units=metric&cnt=5&type=like&mode=json&APPID=' + APP_ID + '&id='\n\treturn fetch(url + locationId)\n\t\t.then(response => {\n\t\t\tif (response.ok) {\n\t\t\t\treturn response.json()\n\t\t\t} \n\t\t\tthrow new Error('Failed to fetch forecast ' + response.statusText)\n\t\t})\n\t\t.then(json => {\n\t\t\treturn json\n\t\t})\n}","import {  FetchForecastResponse, Forecast, ForecastResponseItemRaw, ForecastResponseRaw } from '../../api/types'\r\n\r\nconst forecastFormatter = (forecastInput: ForecastResponseItemRaw): Forecast => {\r\n\t\r\n\tconst dt_txt = new Date(forecastInput.dt *1000)\r\n\t\t.toLocaleDateString('en-us', { weekday: 'short' })\r\n\r\n\treturn {\r\n\t\tdt: forecastInput.dt,\r\n\t\tdt_txt, \r\n\t\t//Possible oversight in the design, see details.png\r\n\t\t//Will keep as is\r\n\t\t//dt_txt === 'Thu' ? 'Thur' : dt_txt,\r\n\t\tmain: {\r\n\t\t\ttemp: forecastInput.temp.day,\r\n\t\t\thumidity: forecastInput.humidity,\r\n\t\t\tpressure: forecastInput.pressure,\r\n\t\t\ttemp_max: forecastInput.temp.max,\r\n\t\t\ttemp_min: forecastInput.temp.min\r\n\t\t},\r\n\t\tweather: forecastInput.weather\r\n\t}\r\n}\r\n\r\nexport const formatForecastData = (forecastResponseRaw: ForecastResponseRaw): FetchForecastResponse => {\r\n\treturn {\r\n\t\tlist: forecastResponseRaw.list.map(f => forecastFormatter(f)),\r\n\t\tcount: forecastResponseRaw.cnt\r\n\t}\r\n}","/**\n * Defines the paths for all screens.\n */\nexport enum Paths {\n\tHOME = '/',\n\tDETAILS = '/details',\n}\n","import { NavigateFunction } from 'react-router-dom'\n\nimport { Paths } from './types'\n\n/**\n * NavigateFunction must be aquired from the useNavigation hook, so is set via NavigateSetter dummy component\n */\nlet navigate: NavigateFunction\n\nexport function setNavigateFunction(func: NavigateFunction): void {\n\tnavigate = func\n}\n\n/* -------------------------------------------------------------------------- */\n/*                              Screen Navigation                             */\n/* -------------------------------------------------------------------------- */\n\nexport const navigateToDetails = (): void => {\n\tnavigate(Paths.DETAILS)\n}\n","import { SagaIterator } from 'redux-saga'\nimport { takeEvery, call, put } from 'redux-saga/effects'\nimport { fetchLocationsAction, FetchLocationsPayload } from '../search/actions'\nimport { fetchForecast, fetchLocations } from '../api/functions'\nimport { ForecastResponseRaw, Location } from '../api/types'\nimport { fetchForecastAction, FetchForecastPayload } from '../details/actions'\nimport { formatForecastData } from '../details/utils/formatForecastData'\n\nfunction* handleFetchLocations(action: FetchLocationsPayload): SagaIterator {\n\tconst query: string = action.payload\n\ttry {\n\t\tconst result: Location[] | undefined = yield call(fetchLocations, query)\n\t\tif (result) {\n\t\t\tyield put(fetchLocationsAction.done({ params: action.payload, result }))\n\t\t}\n\t} catch (error) {\n\t\tyield put(fetchLocationsAction.failed({ params: action.payload, error: error as Error }))\n\t}\n}\n\nfunction* handleFetchForecast(action: FetchForecastPayload): SagaIterator {\n\tconst query: number = action.payload\n\ttry {\n\t\tconst result: ForecastResponseRaw | undefined = yield call(fetchForecast, query)\n\t\tif (result) {\n\t\t\tconst formattedForecastData = formatForecastData(result)\n\t\t\tyield put(fetchForecastAction.done({ \n\t\t\t\tparams: action.payload, \n\t\t\t\tresult: formattedForecastData \n\t\t\t}))\n\t\t}\n\t} catch (error) {\n\t\tyield put(fetchForecastAction.failed({ params: action.payload, error: error as Error }))\n\t}\n}\n\nexport default function* (): SagaIterator {\n\tyield takeEvery(fetchLocationsAction.started, handleFetchLocations)\n\tyield takeEvery(fetchForecastAction.started, handleFetchForecast)\n}\n","import { SagaIterator } from 'redux-saga'\nimport { takeEvery } from 'redux-saga/effects'\n\nimport * as actions from '../search/actions'\nimport * as RootNavigation from '../navigation/NavigationManager'\n\nfunction handleLocationSelected() {\n\t// could extract location information from the action payload to put into url (eg /details/{locationId})\n\tRootNavigation.navigateToDetails()\n}\n\nexport default function* (): SagaIterator {\n\tyield takeEvery(actions.locationSelectedAction, handleLocationSelected)\n}\n","import { all } from 'redux-saga/effects'\n\nimport apiSaga from '../api/sagas'\nimport searchSaga from '../search/sagas'\n\nexport default function* rootSaga(): Generator {\n\tyield all([\n\t\tapiSaga(),\n\t\tsearchSaga(),\n\t])\n}","import { Middleware } from 'redux'\nimport { createLogger } from 'redux-logger'\n\nconst loggerMiddleware: Middleware = createLogger({ predicate: () => true })\nexport default loggerMiddleware","import { createStore, combineReducers, compose, applyMiddleware, Middleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n\n/* Import reducers from our modules */\nimport * as search from '../search/reducer'\nimport * as details from '../details/reducer'\nimport rootSaga from './sagas'\nimport loggerMiddleware from '../../utils/logger'\n\n/**\n * The root store state. Include sub-states for all of the modules / ducks.\n * All of these should be annotated `readonly`, as should everything down\n * the tree of StoreState interfaces, and their contents.\n */\nexport interface RootStoreState {\n\treadonly search: search.StoreState\n\treadonly details: details.StoreState\n}\n\n/**\n * The root reducer, combines reducers for all of the modules / ducks.\n */\nconst reducer = (combineReducers<RootStoreState>({\n\tsearch: search.reducer,\n\tdetails: details.reducer,\n}))\n\n/**\n * Create the redux-saga middleware - which run constantly and listens for redux actions\n */\nconst sagaMiddleware = createSagaMiddleware()\nconst middlewares: Middleware[] = [sagaMiddleware, loggerMiddleware]\n\n/**\n * Enhancers for the store.\n */\nconst enhancers = compose(\n\t/* Add the middlewares */\n\tapplyMiddleware(...middlewares),\n)\n\n/**\n * Create the store. We do not include an initial state, as each of the module / duck\n * reducers includes its own initial state.\n */\nexport const store = createStore(reducer, enhancers)\n\n/* Run the root saga */\nsagaMiddleware.run(rootSaga)\n","import React from 'react'\n\nconst Loader = (): JSX.Element => <p>Loading...</p>\n\nexport default Loader","import React, { ErrorInfo, ReactNode } from 'react'\n\ninterface Props {\n\tchildren: ReactNode\n}\n\ninterface State {\n\thasError: boolean\n}\n\nconst INITIAL_STATE: State = {\n\thasError: false,\n}\n\n/**\n * Handle errors triggered when a module fails to load (ie due to network failure).\n * @see [Error Boundaries](https://reactjs.org/docs/code-splitting.html#error-boundaries)\n */\nclass LoaderErrorBoundary extends React.PureComponent<Props, State> {\n\n\tstate = INITIAL_STATE\n\n\tstatic getDerivedStateFromError(): State {\n\t\t// Update state so the next render will show the fallback UI.\n\t\treturn { hasError: true }\n\t}\n\n\tcomponentDidCatch(error: Error, errorInfo: ErrorInfo): void {\n\t\tconsole.error('Uncaught error:', error, errorInfo)\n\t}\n\n\t_onReloadPage = (): void => {\n\t\twindow.location.reload()\n\t}\n\n\trender(): React.ReactNode {\n\t\tif (this.state.hasError) {\n\t\t\t// You can render any custom fallback UI\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<p>Something went wrong...</p>\n\n\t\t\t\t\t<button onClick={this._onReloadPage}>Retry</button>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\n\t\treturn this.props.children\n\t}\n}\n\nexport default LoaderErrorBoundary\n","import React, { Suspense } from 'react'\nimport { Routes, RoutesProps } from 'react-router-dom'\n\nimport Loader from './Loader'\nimport LoaderErrorBoundary from './LoaderErrorBoundary'\n\n/**\n * A wrapped react-router `Switch` to handle route-based splitting.\n * \n * @param props component props\n */\nconst LazySwitch = ({ children }: RoutesProps): JSX.Element => (\n\t<LoaderErrorBoundary>\n\t\t<Suspense fallback={<Loader />}>\n\t\t\t<Routes>\n\t\t\t\t{children}\n\t\t\t</Routes>\n\t\t</Suspense>\n\t</LoaderErrorBoundary>\n)\n\nexport default LazySwitch\n","import { lazy } from 'react'\n\n/**\n * Provides the routes used across the app.\n * The components are wrapped with lazy so we only load what's necessary based on the current route.\n * \n * Note: The lazy route/component should then be rendered inside a `Suspense`, so we can show fallback content while waiting for the lazy component to load.\n *\n * @see [Code-Splitting](https://reactjs.org/docs/code-splitting.html)\n * @see [Route-based code splitting](https://reactjs.org/docs/code-splitting.html#route-based-code-splitting)\n */\nexport default {\n\tSearch: lazy(() => import('../search/components/Search')),\n\tDetails: lazy(() => import('../details/components/Details')),\n}","import { useNavigate } from 'react-router-dom'\n\nimport { setNavigateFunction } from '../NavigationManager'\n\n/**\n * Needed a way to get access to navigate hook to use from redux-sagas, without using history router.\n * https://stackoverflow.com/questions/68399876/how-to-navigate-outside-of-react-component-using-react-router-6/70002872#70002872\n */\nconst NavigateSetter = (): null => {\n\tconst navigate = useNavigate()\n\n\tsetNavigateFunction(navigate)\n\n\treturn null\n}\n\nexport default NavigateSetter","import React from 'react'\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport { Provider } from 'react-redux'\n\nimport { store } from './modules/root'\nimport { Paths } from './modules/navigation/types'\nimport LazySwitch from './modules/navigation/components/LazySwitch'\nimport Routes from './modules/navigation/routes'\nimport NavigateSetter from './modules/navigation/components/NavigateSetter'\n\nconst App = (): JSX.Element => (\n\t<Provider store={store}>\n\t\t<BrowserRouter basename='/weatherman-react-training-training/'>\n\t\t\t<NavigateSetter />\n\t\t\t<LazySwitch>\n\t\t\t\t<Route path={Paths.HOME} element={<Routes.Search />} />\n\t\t\t\t<Route path={Paths.DETAILS} element={<Routes.Details />} />\n\t\t\t</LazySwitch>\n\t\t</BrowserRouter>\n\t</Provider>\n)\n\nexport default App\n","import React from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './index.scss'\n\nimport App from './App'\n\nconst container = document.getElementById('root') as HTMLElement\nconst root = createRoot(container)\nroot.render(<App />)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals()"],"sourceRoot":""}